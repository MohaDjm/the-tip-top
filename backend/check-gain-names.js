const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function checkGainNames() {
  try {
    console.log('üîç V√©rification des noms de gains dans la base de donn√©es...\n')
    
    const gains = await prisma.gain.findMany({
      orderBy: { quantity: 'desc' }
    })
    
    console.log('üìä Gains dans la base de donn√©es:')
    gains.forEach((gain, index) => {
      console.log(`${index + 1}. "${gain.name}" (${gain.quantity} codes, ${gain.remainingQuantity} restants)`)
    })
    
    console.log('\nüé® Gains dans PrizeWheel.tsx:')
    const frontendPrizes = [
      'Infuseur √† th√©',
      'Bo√Æte de 100g th√© d√©tox',
      'Bo√Æte de 100g th√© signature',
      'Coffret d√©couverte 39‚Ç¨',
      'Coffret d√©couverte 69‚Ç¨'
    ]
    
    frontendPrizes.forEach((name, index) => {
      console.log(`${index + 1}. "${name}"`)
    })
    
    console.log('\nüîç Comparaison:')
    gains.forEach(gain => {
      const match = frontendPrizes.find(fp => fp === gain.name)
      if (match) {
        console.log(`‚úÖ "${gain.name}" - MATCH`)
      } else {
        console.log(`‚ùå "${gain.name}" - PAS DE MATCH`)
        // Chercher des correspondances partielles
        const partialMatch = frontendPrizes.find(fp => 
          fp.toLowerCase().includes(gain.name.toLowerCase()) || 
          gain.name.toLowerCase().includes(fp.toLowerCase())
        )
        if (partialMatch) {
          console.log(`   üîç Correspondance partielle possible: "${partialMatch}"`)
        }
      }
    })
    
  } catch (error) {
    console.error('‚ùå Erreur:', error)
  } finally {
    await prisma.$disconnect()
  }
}

checkGainNames()
