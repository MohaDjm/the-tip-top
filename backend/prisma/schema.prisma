// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(uuid())
  email             String   @unique
  password          String?
  firstName         String
  lastName          String
  dateOfBirth       DateTime
  phone             String
  address           String
  city              String
  postalCode        String
  role              Role     @default(CLIENT)
  emailVerified     Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  participations    Participation[]
  socialAccounts    SocialAccount[]
  grandTirageWins   GrandTirage[]
}

model Code {
  id                String   @id @default(uuid())
  code              String   @unique @db.VarChar(20)
  isUsed            Boolean  @default(false)
  gainId            String
  createdAt         DateTime @default(now())
  
  gain              Gain     @relation(fields: [gainId], references: [id])
  participation     Participation?
}

model Gain {
  id                String   @id @default(uuid())
  name              String
  value             Decimal  @db.Decimal(10, 2)
  description       String
  quantity          Int
  remainingQuantity Int
  
  codes             Code[]
  participations    Participation[]
}

model Participation {
  id                String   @id @default(uuid())
  userId            String
  codeId            String   @unique
  gainId            String
  participationDate DateTime @default(now())
  ipAddress         String
  userAgent         String
  isClaimed         Boolean  @default(false)
  claimedAt         DateTime?
  claimedByEmployeeId String?
  
  user              User     @relation(fields: [userId], references: [id])
  code              Code     @relation(fields: [codeId], references: [id])
  gain              Gain     @relation(fields: [gainId], references: [id])
}

model SocialAccount {
  id                String   @id @default(uuid())
  userId            String
  provider          String
  providerAccountId String
  
  user              User     @relation(fields: [userId], references: [id])
  
  @@unique([provider, providerAccountId])
}

model GrandTirage {
  id                String   @id @default(uuid())
  winnerId          String
  totalParticipants Int
  drawDate          DateTime @default(now())
  conductedBy       String   // ID de l'admin qui a lanc√© le tirage
  isActive          Boolean  @default(true)
  
  winner            User     @relation(fields: [winnerId], references: [id])
}

model NewsletterSubscription {
  id            String   @id @default(uuid())
  email         String   @unique
  firstName     String?
  subscribedAt  DateTime @default(now())
  isActive      Boolean  @default(true)
}

model Analytics {
  id            String   @id @default(uuid())
  eventType     String   // 'page_view', 'cta_click', 'registration', 'participation'
  eventData     Json?    // Additional data for the event
  userId        String?  // Optional user ID if logged in
  sessionId     String   // Session identifier
  ipAddress     String
  userAgent     String
  createdAt     DateTime @default(now())
}

enum Role {
  CLIENT
  EMPLOYEE
  ADMIN
}
